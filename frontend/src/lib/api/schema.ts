/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/Auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * User login
     * @description Authenticates a user with username and password and returns a JWT token
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Login credentials */
      requestBody?: {
        content: {
          'application/json': components['schemas']['ShipMvp.Application.Identity.LoginDto'];
          'text/json': components['schemas']['ShipMvp.Application.Identity.LoginDto'];
          'application/*+json': components['schemas']['ShipMvp.Application.Identity.LoginDto'];
        };
      };
      responses: {
        /** @description Login successful */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ShipMvp.Application.Identity.AuthResultDto'];
          };
        };
        /** @description Invalid login credentials */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Too many login attempts */
        429: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * User logout
     * @description Logs out the current user and invalidates their token
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Logout successful */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request - Invalid input data */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Refresh token
     * @description Refresh an existing JWT token
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Token refresh request */
      requestBody?: {
        content: {
          'application/json': components['schemas']['ShipMvp.Api.Controllers.RefreshTokenRequest'];
          'text/json': components['schemas']['ShipMvp.Api.Controllers.RefreshTokenRequest'];
          'application/*+json': components['schemas']['ShipMvp.Api.Controllers.RefreshTokenRequest'];
        };
      };
      responses: {
        /** @description Token refreshed successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ShipMvp.Application.Identity.AuthResultDto'];
          };
        };
        /** @description Bad Request - Invalid input data */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Invalid token */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Welcome endpoint */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/health': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Health check endpoint */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Success */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Invoices': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get list of invoices
     * @description Retrieves a paginated list of invoices with optional filtering by customer name and status.
     */
    get: operations['GetInvoices'];
    put?: never;
    /**
     * Create a new invoice
     * @description Creates a new invoice with the provided customer information and line items. The invoice will be in Draft status initially.
     */
    post: operations['CreateInvoice'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Invoices/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get invoice by ID
     * @description Retrieves detailed information about a specific invoice by its unique identifier.
     */
    get: operations['GetInvoice'];
    /**
     * Update an existing invoice
     * @description Updates the customer name and line items of an existing invoice. Only invoices in Draft status can be updated.
     */
    put: operations['UpdateInvoice'];
    post?: never;
    /**
     * Delete invoice
     * @description Permanently deletes an invoice. This operation cannot be undone.
     */
    delete: operations['DeleteInvoice'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Invoices/{id}/mark-paid': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Mark invoice as paid
     * @description Updates the invoice status to Paid. This operation is only allowed for invoices in Draft status.
     */
    patch: operations['MarkInvoiceAsPaid'];
    trace?: never;
  };
  '/api/Users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get users
     * @description Retrieve a list of users with optional filtering and pagination
     */
    get: {
      parameters: {
        query?: {
          /** @description Search text for username, name, surname, or email */
          searchText?: string;
          /** @description Filter by role */
          role?: string;
          /** @description Filter by active status */
          isActive?: boolean;
          /** @description Number of items per page (default: 10) */
          pageSize?: number;
          /** @description Page number (default: 1) */
          pageNumber?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Users retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ShipMvp.Application.Identity.UserDto'][];
          };
        };
      };
    };
    put?: never;
    /**
     * Create user
     * @description Create a new user in the system
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description User creation data */
      requestBody?: {
        content: {
          'application/json': components['schemas']['ShipMvp.Application.Identity.CreateUserDto'];
          'text/json': components['schemas']['ShipMvp.Application.Identity.CreateUserDto'];
          'application/*+json': components['schemas']['ShipMvp.Application.Identity.CreateUserDto'];
        };
      };
      responses: {
        /** @description User created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ShipMvp.Application.Identity.UserDto'];
          };
        };
        /** @description Invalid user data */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Username or email already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Users/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user by ID
     * @description Retrieve a specific user by their ID
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User found */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ShipMvp.Application.Identity.UserDto'];
          };
        };
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /**
     * Update user
     * @description Update an existing user's information
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User ID */
          id: string;
        };
        cookie?: never;
      };
      /** @description User update data */
      requestBody?: {
        content: {
          'application/json': components['schemas']['ShipMvp.Application.Identity.UpdateUserDto'];
          'text/json': components['schemas']['ShipMvp.Application.Identity.UpdateUserDto'];
          'application/*+json': components['schemas']['ShipMvp.Application.Identity.UpdateUserDto'];
        };
      };
      responses: {
        /** @description User updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ShipMvp.Application.Identity.UserDto'];
          };
        };
        /** @description Invalid user data */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    post?: never;
    /**
     * Delete user
     * @description Delete a user from the system
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User deleted successfully */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Users/{id}/roles': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add role to user
     * @description Assign a role to a user
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User ID */
          id: string;
        };
        cookie?: never;
      };
      /** @description Role assignment request */
      requestBody?: {
        content: {
          'application/json': components['schemas']['ShipMvp.Api.Controllers.RoleRequest'];
          'text/json': components['schemas']['ShipMvp.Api.Controllers.RoleRequest'];
          'application/*+json': components['schemas']['ShipMvp.Api.Controllers.RoleRequest'];
        };
      };
      responses: {
        /** @description Role added successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ShipMvp.Application.Identity.UserDto'];
          };
        };
        /** @description Bad Request - Invalid input data */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Users/{id}/roles/{role}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Remove role from user
     * @description Remove a role from a user
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User ID */
          id: string;
          /** @description Role name to remove */
          role: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Role removed successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ShipMvp.Application.Identity.UserDto'];
          };
        };
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description Request model for token refresh */
    'ShipMvp.Api.Controllers.RefreshTokenRequest': {
      token?: string | null;
    };
    /** @description Request model for role operations */
    'ShipMvp.Api.Controllers.RoleRequest': {
      role?: string | null;
    };
    'ShipMvp.Application.Identity.AuthResultDto': {
      success?: boolean;
      token?: string | null;
      user?: components['schemas']['ShipMvp.Application.Identity.UserDto'];
      errorMessage?: string | null;
    };
    'ShipMvp.Application.Identity.CreateUserDto': {
      username: string;
      name: string;
      surname: string;
      /** Format: email */
      email: string;
      /** Format: tel */
      phoneNumber?: string | null;
      isActive?: boolean;
    };
    'ShipMvp.Application.Identity.LoginDto': {
      username: string;
      password: string;
      rememberMe?: boolean;
    };
    'ShipMvp.Application.Identity.UpdateUserDto': {
      name: string;
      surname: string;
      /** Format: tel */
      phoneNumber?: string | null;
      isActive?: boolean;
      isEmailConfirmed?: boolean;
      isPhoneNumberConfirmed?: boolean;
    };
    'ShipMvp.Application.Identity.UserDto': {
      /** Format: uuid */
      id?: string;
      username?: string | null;
      name?: string | null;
      surname?: string | null;
      email?: string | null;
      phoneNumber?: string | null;
      isActive?: boolean;
      isEmailConfirmed?: boolean;
      isPhoneNumberConfirmed?: boolean;
      isLockoutEnabled?: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      lastLoginAt?: string | null;
      roles?: string[] | null;
    };
    'ShipMvp.Application.Invoices.CreateInvoiceDto': {
      customerName?: string | null;
      items?:
        | components['schemas']['ShipMvp.Application.Invoices.CreateInvoiceItemDto'][]
        | null;
    };
    'ShipMvp.Application.Invoices.CreateInvoiceItemDto': {
      description?: string | null;
      /** Format: double */
      amount?: number;
    };
    'ShipMvp.Application.Invoices.InvoiceDto': {
      /** Format: uuid */
      id?: string;
      customerName?: string | null;
      items?:
        | components['schemas']['ShipMvp.Application.Invoices.InvoiceItemDto'][]
        | null;
      /** Format: double */
      totalAmount?: number;
      currency?: string | null;
      /** Format: date-time */
      createdAt?: string;
      status?: string | null;
    };
    'ShipMvp.Application.Invoices.InvoiceItemDto': {
      description?: string | null;
      /** Format: double */
      amount?: number;
    };
    'ShipMvp.Application.Invoices.UpdateInvoiceDto': {
      customerName?: string | null;
      items?:
        | components['schemas']['ShipMvp.Application.Invoices.UpdateInvoiceItemDto'][]
        | null;
    };
    'ShipMvp.Application.Invoices.UpdateInvoiceItemDto': {
      description?: string | null;
      /** Format: double */
      amount?: number;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    'ShipMvp.Domain.Invoices.InvoiceStatus': 0 | 1 | 2 | 3;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  GetInvoices: {
    parameters: {
      query?: {
        /** @description Filter by customer name (case-insensitive partial match) */
        customerName?: string;
        /** @description Filter by invoice status */
        status?: components['schemas']['ShipMvp.Domain.Invoices.InvoiceStatus'];
        /** @description Number of items per page (1-100) */
        pageSize?: number;
        /** @description Page number starting from 1 */
        pageNumber?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of invoices retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/plain': components['schemas']['ShipMvp.Application.Invoices.InvoiceDto'][];
          'application/json': components['schemas']['ShipMvp.Application.Invoices.InvoiceDto'][];
          'text/json': components['schemas']['ShipMvp.Application.Invoices.InvoiceDto'][];
        };
      };
      /** @description Invalid query parameters */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CreateInvoice: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Invoice creation data */
    requestBody?: {
      content: {
        'application/json': components['schemas']['ShipMvp.Application.Invoices.CreateInvoiceDto'];
        'text/json': components['schemas']['ShipMvp.Application.Invoices.CreateInvoiceDto'];
        'application/*+json': components['schemas']['ShipMvp.Application.Invoices.CreateInvoiceDto'];
      };
    };
    responses: {
      /** @description Invoice created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/plain': components['schemas']['ShipMvp.Application.Invoices.InvoiceDto'];
          'application/json': components['schemas']['ShipMvp.Application.Invoices.InvoiceDto'];
          'text/json': components['schemas']['ShipMvp.Application.Invoices.InvoiceDto'];
        };
      };
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  GetInvoice: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Invoice unique identifier */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Invoice found */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/plain': components['schemas']['ShipMvp.Application.Invoices.InvoiceDto'];
          'application/json': components['schemas']['ShipMvp.Application.Invoices.InvoiceDto'];
          'text/json': components['schemas']['ShipMvp.Application.Invoices.InvoiceDto'];
        };
      };
      /** @description Invalid invoice ID format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invoice not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UpdateInvoice: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Invoice unique identifier */
        id: string;
      };
      cookie?: never;
    };
    /** @description Invoice update data */
    requestBody?: {
      content: {
        'application/json': components['schemas']['ShipMvp.Application.Invoices.UpdateInvoiceDto'];
        'text/json': components['schemas']['ShipMvp.Application.Invoices.UpdateInvoiceDto'];
        'application/*+json': components['schemas']['ShipMvp.Application.Invoices.UpdateInvoiceDto'];
      };
    };
    responses: {
      /** @description Invoice updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/plain': components['schemas']['ShipMvp.Application.Invoices.InvoiceDto'];
          'application/json': components['schemas']['ShipMvp.Application.Invoices.InvoiceDto'];
          'text/json': components['schemas']['ShipMvp.Application.Invoices.InvoiceDto'];
        };
      };
      /** @description Invalid input data or invoice cannot be updated */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invoice not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  DeleteInvoice: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Invoice unique identifier */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Invoice deleted successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid invoice ID format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invoice not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  MarkInvoiceAsPaid: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Invoice unique identifier */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Invoice marked as paid successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/plain': components['schemas']['ShipMvp.Application.Invoices.InvoiceDto'];
          'application/json': components['schemas']['ShipMvp.Application.Invoices.InvoiceDto'];
          'text/json': components['schemas']['ShipMvp.Application.Invoices.InvoiceDto'];
        };
      };
      /** @description Invoice cannot be marked as paid (invalid status) */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invoice not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
