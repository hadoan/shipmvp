using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Text;
using System.Linq;
using System.Collections.Immutable;

namespace ShipMvp.SourceGenerators;

internal sealed record ClassInfo(string Namespace, string ClassName, string? Route, ImmutableArray<IMethodSymbol> Methods);

[Generator]
public sealed class AutoControllerGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Find all class declarations with attributes
        var candidates = context.SyntaxProvider.CreateSyntaxProvider(
            static (node, _) => node is ClassDeclarationSyntax cds && cds.AttributeLists.Count > 0,
            static (ctx, _) => GetClassInfo(ctx))
            .Where(static info => info is not null)
            .Select(static (info, _) => info!);

        context.RegisterSourceOutput(candidates.Collect(), static (spc, list) =>
        {
            foreach (var info in list)
            {
                var source = GenerateController(info);
                spc.AddSource($"{info.ClassName}Controller.g.cs", source);
            }
        });
    }

    private static ClassInfo? GetClassInfo(GeneratorSyntaxContext context)
    {
        var cds = (ClassDeclarationSyntax)context.Node;
        var model = context.SemanticModel;
        var symbol = model.GetDeclaredSymbol(cds) as INamedTypeSymbol;
        if (symbol == null) return null;

        // Look for AutoControllerAttribute
        var acAttr = symbol.GetAttributes()
            .FirstOrDefault(a => a.AttributeClass?.ToDisplayString() == "ShipMvp.Core.Attributes.AutoControllerAttribute");
        if (acAttr == null) return null;

        string? route = null;
        foreach (var named in acAttr.NamedArguments)
        {
            if (named.Key == "Route" && named.Value.Value is string s)
            {
                route = s;
                break;
            }
        }

        // Collect public instance methods
        var methods = symbol.GetMembers()
            .OfType<IMethodSymbol>()
            .Where(m => m.MethodKind == MethodKind.Ordinary && !m.IsStatic && m.DeclaredAccessibility == Accessibility.Public)
            .ToImmutableArray();

        return new ClassInfo(symbol.ContainingNamespace.ToDisplayString(), symbol.Name, route, methods);
    }

    private static string GenerateController(ClassInfo info)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("using Microsoft.AspNetCore.Mvc;");
        sb.AppendLine();
        sb.AppendLine($"namespace {info.Namespace}.Generated;");
        sb.AppendLine();

        var route = info.Route ?? "api/[controller]";
        var controllerName = $"{info.ClassName}Controller";
        sb.AppendLine("[ApiController]");
        sb.AppendLine($"[Route(\"{route}\")]");
        sb.AppendLine($"public class {controllerName} : ControllerBase");
        sb.AppendLine("{");
        sb.AppendLine("    // Generated actions will be added here");
        sb.AppendLine("}");

        return sb.ToString();
    }
}